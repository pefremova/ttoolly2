# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest coverage pytest-console-scripts
        python -m pip install -e .
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        coverage run --data-file=coverage-main-${{ matrix.python-version }} -m pytest tests/* -vv
    - name: Upload coverage result
      uses: actions/upload-artifact@v3
      with:
        name: report
        path: coverage-main-${{ matrix.python-version }}

  django:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        django-version: ["4.2", "5.0"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install Django==${{ matrix.django-version }} coverage
    - name: Run Tests
      run: |
        cd test_projects/django_project
        coverage run --data-file=coverage-django-${{ matrix.python-version }}-${{ matrix.django-version }} manage.py test tests -v2
    - name: Upload coverage result
      uses: actions/upload-artifact@v3
      with:
        name: report
        path: test_projects/django_project/coverage-django-${{ matrix.python-version }}-${{ matrix.django-version }}

  django-pytest:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        django-version: ["4.2", "5.0"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pytest pytest-django Django==${{ matrix.django-version }} coverage
    - name: Run Tests
      run: |
        cd test_projects/django_project
        coverage run --data-file=coverage-django-pytest-${{ matrix.python-version }}-${{ matrix.django-version }} -m pytest tests/**.py -vv
    - name: Upload coverage result
      uses: actions/upload-artifact@v3
      with:
        name: report
        path: test_projects/django_project/coverage-django-pytest-${{ matrix.python-version }}-${{ matrix.django-version }}

  fastapi-pytest:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        fastapi-version: ["0.111"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install -r test_projects/fast_api_project/requirements.pip
        python -m pip install pytest fastapi==${{ matrix.fastapi-version }} coverage
    - name: Run Tests
      run: |
        cd test_projects/fast_api_project
        coverage run --data-file=coverage-fastapi-pytest-${{ matrix.python-version }}-${{ matrix.fastapi-version }} -m pytest tests/* -vv
    - name: Upload coverage result
      uses: actions/upload-artifact@v3
      with:
        name: report
        path: test_projects/fast_api_project/coverage-fastapi-pytest-${{ matrix.python-version }}-${{ matrix.fastapi-version }}

  coverage-report:
    needs: [build, django, django-pytest, fastapi-pytest]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install coverage
    - name: Download coverage results
      uses: actions/download-artifact@v3
      with:
        name: report
    - name: Generate coverage report
      run: |
        coverage combine coverage-*
        coverage xml --include "ttoolly/*"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
